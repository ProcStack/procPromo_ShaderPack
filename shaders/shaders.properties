#Minecraft Settings
oldLighting=false
underwaterOverlay = false

moon=true
stars=false
vignette=false
dynamicHandLight=true
shadowTranslucent=false

frustum.culling=true
uniform.float.BiomeTemp=smooth(1, temperature, 7, 7)

#Block AO is written to color.a when true
separateAo=true

sliders=DetailBluring EdgeShading LightingBrightness GlowBrightness

screen.columns = 4
screen= <empty> DetailBluring EdgeShading <empty> <empty> LightingBrightness GlowBrightness <empty> <empty> <empty> <empty> <empty> <empty> SolidLeaves UnderWaterBlur <empty> <empty> <empty> <empty> <empty> <empty> <empty> GreyWorld <empty>

alphaTest.gbuffers_terrain=off
# alphaTest.gbuffers_entities=off
alphaTest.gbuffers_skytextured=off
alphaTest.gbuffers_skybasic=off
alphaTest.gbuffers_weather=off
alphaTest.gbuffers_armor_glint=off
beacon.beam.depth=false

variable.float.texelSizeX = 1.0/viewWidth
variable.float.texelSizeY = 1.0/viewHeight
uniform.vec2.texelSize=vec2(texelSizeX,texelSizeY)


variable.float.normSunVec = sqrt(sunPosition.x*sunPosition.x+sunPosition.y*sunPosition.y+sunPosition.z*sunPosition.z)
variable.float.normUpVec = sqrt(upPosition.x*upPosition.x+upPosition.y*upPosition.y+upPosition.z*upPosition.z)

variable.float.sunPosX = sunPosition.x/normSunVec
variable.float.sunPosY = sunPosition.y/normSunVec
variable.float.sunPosZ = sunPosition.z/normSunVec

uniform.vec3.sunVec=vec3(sunPosX,sunPosY,sunPosZ)

variable.float.upPosX = upPosition.x/normUpVec
variable.float.upPosY = upPosition.y/normUpVec
variable.float.upPosZ = upPosition.z/normUpVec

uniform.vec3.upVec=vec3(upPosX,upPosY,upPosZ)
uniform.float.sunElevation = sunPosX*upPosX+sunPosY*upPosY+sunPosZ*upPosZ



texture.noise=textures/SoftNoise_512.jpg
texture.gbuffers.colortex4=textures/minecraft_vanilla_textureAtlas.png
texture.gbuffers.colortex5=textures/minecraft_vanilla_glowAtlas_grey.jpg

scale.composite1=0.4
scale.composite2=0.3
scale.composite3=0.3
#scale.composite4=0.3









#   variable.float.isHurt=smooth(1, if(is_hurt, 1.3, 0), 0, 10)
#   variable.float.isBurning=smooth(2, if(is_burning, 1.3, 0), 2, 10)
#   variable.float.isGlowing=smooth(3, if(is_glowing, 1.3, 0), 2, 10)
#   variable.float.isInvisible=smooth(4, if(is_invisible, 1.3, 0), 2, 10)


# From some other pack... Maybe BSL? Highperformance Toaster?
# I'm not even using them...
# Some are def useful, but waste right now


variable.float.angSun= -(( pi * 0.5128205128205128 - acos(sunElevation*1.065-0.065))/1.5)
variable.float.angMoon= -(( pi * 0.5128205128205128 - acos(-sunElevation*1.065-0.065))/1.5)
variable.float.angSky= -(( pi * 0.5128205128205128 - acos(sunElevation*0.95+0.05))/1.5)
variable.float.angSkyNight= -(( pi * 0.5128205128205128 -acos(-sunElevation*0.95+0.05))/1.5)

uniform.float.sunIntensity=max(0.,1.0-exp(angSun))
variable.float.fading = clamp(sunElevation+0.095,0.0,0.08)/0.08
uniform.float.skyIntensity=max(0.,1.0-exp(angSky))*(1.0-rainStrength*0.4)*pow(fading,5.0)
uniform.float.moonIntensity=max(0.,1.0-exp(angMoon))
variable.float.fading2 = clamp(-sunElevation+0.095,0.0,0.08)/0.08
uniform.float.skyIntensityNight=max(0.,1.0-exp(angSkyNight))*(1.0-rainStrength*0.4)*pow(fading2,5.0)

variable.float.sunAmount = 27.
variable.float.ambientAmount = 1.2

variable.float.modWT = (worldTime%24000)*1.0

uniform.float.fogAmount = 1/2000.+ 1/90.*(clamp(modWT-11000.,0.,2000.0)/2000.+(1.0-clamp(modWT,0.,3000.0)/3000.))*(clamp(modWT-11000.,0.,2000.0)/2000.+(1.0-clamp(modWT,0.,3000.0)/3000.)) + 1/25.*rainStrength

variable.float.sunElev = pow(clamp(1.0-sunElevation,0.0,1.0),4.0)*1.8
variable.float.sunlightR0=1.0
variable.float.sunlightG0=(0.89*exp(-sunElev*0.57))*(1.0-rainStrength*0.3) + rainStrength*0.3
variable.float.sunlightB0=(0.8*exp(-sunElev*1.4))*(1.0-rainStrength*0.3) + rainStrength*0.3

variable.float.sunlightR=sunlightR0/(sunlightR0+sunlightG0+sunlightB0)
variable.float.sunlightG=sunlightG0/(sunlightR0+sunlightG0+sunlightB0)
variable.float.sunlightB=sunlightB0/(sunlightR0+sunlightG0+sunlightB0)
uniform.vec3.nsunColor=vec3(sunlightR,sunlightG,sunlightB)
uniform.vec3.sunColor=vec3(sunlightR*3.*sunAmount*(1.0-rainStrength*0.95),sunlightG*3.*sunAmount*(1.0-rainStrength*0.95),sunlightB*3.*sunAmount*(1.0-rainStrength*0.95))

variable.float.avgEyeIntensity = ((sunIntensity*120.+moonIntensity*4.)+skyIntensity*230.+skyIntensityNight*4.)
uniform.float.exposure =  0.18/log(max(avgEyeIntensity*0.16+1.0,1.13))*0.3*log(2)

variable.float.lightSign = clamp(sunIntensity*pow(10.,35.),0.,1.)
uniform.vec4.lightCol=vec4((sunlightR*3.*sunAmount*sunIntensity+0.16/5.-0.16/5.*lightSign)*(1.0-rainStrength*0.95)*7.84*exposure,7.84*(sunlightG*3.*sunAmount*sunIntensity+0.24/5.-0.24/5.*lightSign)*(1.0-rainStrength*0.95)*exposure,7.84*(sunlightB*3.*sunAmount*sunIntensity+0.36/5.-0.36/5.*lightSign)*(1.0-rainStrength*0.95)*exposure,lightSign*2.0-1.0)
